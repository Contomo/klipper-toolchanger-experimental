[rounded_path]
resolution:         0.25
algorithm:          bezier
replace_g0:         False

[toolchanger]
require_tool_present: False # Set to true to disable the UNSELECT_TOOL command
verify_tool_pickup: False # for automatic verify (not through gcode) change this to true.
on_axis_not_homed: home # home|abort
initialize_on: manual   # manual|first-use|homing
uses_axis: xyz # just ensures that these axis are homed before toolchanges. for liftbar, maybe change this?
t_command_restore_axis: XYZ

params_safe_y: 150  # safe distance when changing (moving up and down) 
params_close_y: 25  # safe distance to tools without tool attatched

params_fast_speed: 50000 # Go as fast as we can
params_path_speed: 900 # 20mm/s for the actual change

# size of your tool, used for some calcs/obstacle avoidance/appraoches.
params_tool_size: { 'x': 60,
                    'y': 60,
                    'z': 90, }
                    
# CHANGE THIS!!! Set the path for your printer, see tool_paths.md
# (this is for a stealthchanger)
# Path positions relative to the park position
# use x,y,z; f= multiplier to path speed; verify= Verify tool detected at end of the move.
params_dropoff_path: [{'z': 3.5,  'y': 4, 'f': 3.0},
                      {'z': 2,    'y': 1, 'f': 2.0},
                      {'z': 1,    'y': 0, 'f': 1.0},
                      {'z': 0,    'y': 0, 'f': 0.8},
                      {'z': -12,  'y': 0, 'f': 3}]

params_pickup_path:  [{'z': -12,  'y': 2, 'f': 3.0},
                      {'z': -10,  'y': 0, 'f': 2.0},
                      {'z': -5,   'y': 0, 'f': 1.0},
                      {'z': 1,    'y': 0, 'f': 0.75, 'verify': 1},
                      {'z': 2,    'y': 2, 'f': 1.25},
                      {'z': 3,    'y': 5, 'f': 2}]


# Parking position - per tool
# params_park_x: 142.2
# params_park_y: -6.0
# params_park_z: 308.2

# Default shaper params
params_input_shaper_freq_x: 62.4
params_input_shaper_freq_y: 88.6

before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

after_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    {% if tool.params_input_shaper_freq_x %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y}
    {% endif %}

dropoff_gcode:
    # ─── get all our variables from the old tool
    {% set th               = printer.toolhead %}
    {% set cur              = th.position %}
    {% set lim_min, lim_max = th.axis_minimum, th.axis_maximum %} 
    {% set close_y_force    = tool.params_close_y|float %}
    {% set safe_y_force     = tool.params_safe_y|float %}
    {% set path_speed       = tool.params_path_speed|float %}
    {% set tool_size        = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}  
    {% set min_D            = tool.params_min_D|default(25)|float %}
    {% set fast             = tool.params_fast_speed|float %}
    {% set accel            = tool.params_fast_accel|default(printer.configfile.settings.printer.max_accel)|float %}
    {% set path             = tool.params_dropoff_path %}
    {% set dock, start      = {}, {} %}
    {% for ax in ('x', 'y', 'z') %}
        {% set pos = tool['params_park_' ~ ax]|float %}
        {% set _ = dock.update( { ax: pos } ) %}
        {% set _ = start.update( { ax: pos + path[0].get(ax, 0)|float } ) %}
    {% endfor %}

    {%- macro try_add_param(axis, path_step) -%} # adds " X12.5" for example
        {(' ' ~ axis|upper ~ (dock[axis] + path_step[axis])) if axis in path_step else ''}
    {%- endmacro -%}

    # ╭────────────────────────── EXPLAIN ────────────────────────────╮
    # |  why tool size, why "safe_y_force" and not just "safe_y?"     |
    # |  we clamp the safe_y because if its too low,                  |
    # |  wed smash into docks. Similarly for the other side,          |
    # |  we similarly clamp the umbilicals side, this lets us pick    |
    # |  a value which works (while also avoiding unnecicary moves)   |
    # |                                                               | 
    # |         (dock.y + tool_size.y)                                | 
    # |               (approach)                                      | 
    # |     (Dock)|     /           <\ (umbilicals)                   | 
    # | (dock.y ^)||_| <*            | (^ lim_max.y - tool_size.y)    |     
    # |           |                  |                                |     
    # |           |                  |                                | 
    # |           | 0 ---> *  <- 350 |                                |         
    # |                 (cur.y)                                       | 
    # ╰───────────────────────────────────────────────────────────────╯

    {% set retreat_y  = [[cur.y, safe_y_force, (dock.y + tool_size.y)]|max, lim_max.y - tool_size.y]|min %}
    {% set approach_y = dock.y + tool_size.y|float %}
    {% set close_y    = [(dock.y + path[-1].get('y', 0)|float) + 2, close_y_force]|max %}

    M82
    G90
    SET_VELOCITY_LIMIT ACCEL={ accel }

    # ─── Move up to the dock and drop it off
    G0 Z{ [cur.z + 1.0, lim_max.z]|min } F{ fast }

    ROUNDED_G0 Y={ retreat_y }   D=50    F={ fast }

    {% if (dock.x - cur.x)|abs >= min_D %}
        # ─── Join XZ segment if X is too short (corner ends up too sharp)
        ROUNDED_G0 X={ dock.x }  D={ ((safe_y_force / 4.0) * 3.0)|int } F={ fast }
        ROUNDED_G0 Z={ start.z } D={ (safe_y_force / 2.1)|int }         F={ fast }
    {% else %}
        ROUNDED_G0 X={ dock.x } Z={ start.z } D={ ((safe_y_force / 4.0) * 3.0)|int } F={ fast }
    {% endif %}

    ROUNDED_G0 Y={ approach_y } D=10   F={ fast }
    ROUNDED_G0 Y={ start.y }    D=0    F={ fast/2 }

    STOP_TOOL_PROBE_CRASH_DETECTION

    # ─── run path
    {% for step in path %}
        G0{try_add_param('x', step)}{try_add_param('y', step)}{try_add_param('z', step)} F{path_speed * step.get('f', 1.0)|float}
    {% endfor %}

    {"SET_STEPPER_ENABLE STEPPER=" ~ tool.extruder ~ " ENABLE=0" if tool.extruder and 'extruder' in tool.extruder else ''}
    {% if pickup_tool is none %}
        G0 Y{ retreat_y } F{ fast }
    {% else %}
        G0 Y{ close_y } F{ fast }
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={ th.max_accel }



pickup_gcode:
    # ─── get all variables for the tool we want to pick up
    {% set th               = printer.toolhead %}
    {% set cur              = th.position %}
    {% set lim_min, lim_max = th.axis_minimum, th.axis_maximum %} 
    {% set tool_size        = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}
    {% set min_D            = tool.params_min_D|default(25)|float %}
    {% set close_y_force    = tool.params_close_y|default(40)|float %}
    {% set safe_y_force     = tool.params_safe_y|default(120)|float %}
    {% set fast             = tool.params_fast_speed|default(99999)|float %}
    {% set accel            = tool.params_fast_accel|default(printer.configfile.settings.printer.max_accel)|float %}
    {% set path             = tool.params_pickup_path %}
    {% set ps               = tool.params_path_speed|default(1000)|float %}
    {% set tn               = tool.tool_number %}
    {% set dock, start      = {}, {} %}
    {% for ax in ('x', 'y', 'z') %}
        {% set pos = tool['params_park_' ~ ax]|float %}
        {% set _ = dock.update( { ax: pos } ) %}
        {% set _ = start.update( { ax: pos + path[0].get(ax, 0)|float } ) %}
    {% endfor %}

    {% set close_y  = [(dock.y + path[-1]['y']) + 2, close_y_force]|max %}
    {% set safe_y   = [safe_y_force, (dock.y + tool_size.y)]|max %}

    {%- macro add_param(axis, path_step) -%}
        {(' ' ~ axis|upper ~ '=' ~ (dock[axis] + path_step[axis])) if axis in path_step else ''}
    {%- endmacro -%}

    SET_VELOCITY_LIMIT ACCEL={accel}
    # ─── Move to pick it up now
    G90
    {% if dropoff_tool is none %} # ensure we dont ram in Y
        ROUNDED_G0 Z={start.z}  F={fast} D=20
    {% endif %}

    ROUNDED_G0 Y={close_y}              F={fast} D=5  #todo calc point distance, scale D accordingly.
    ROUNDED_G0 X={start.x} Z={start.z}  F={fast} D=5
    ROUNDED_G0 Y={start.y}              F={fast} D=0
    
    {% if tool.extruder %} # ─── wait for temp if has extruder and is heating (within 10°C)
        {% set target, temp = printer[tool.extruder].target, printer[tool.extruder].temperature %}
        { ('M109 T' ~ tn ~ ' S' ~ target) if target - 10.0 >= temp else '' }
    {% endif %}

    # ─── Run the pickup path until we hit the 'verify' point.
    {% for step in path %}
        ROUNDED_G0{add_param('x', step)}{add_param('y', step)}{add_param('z', step)} F={ps * step.get('f', 1.0)|float} D={step.get('d', 1.0)}
        {% if 'verify' in step %}
            # ROUNDED_G0 D=0
            # VERIFY_TOOL_DETECTED T={tn}
        {% endif %}
    {% endfor %}
    # verify here or at verify. i do it here because theres less waiting 
    #     (gcode button event should already arrive when we are here)
    ROUNDED_G0 D=0

    # ─── restore accel in case we error in verify.
    SET_VELOCITY_LIMIT ACCEL={th.max_accel}
    VERIFY_TOOL_DETECTED T={tn}
    SET_VELOCITY_LIMIT ACCEL={accel}

    #================================= PICKUP /\---/\ ===== RESTORE \/---\/ =================================

    {% set rx = restore_position.get('X', False) %}
    {% set ry = restore_position.get('Y', False) %}
    {% set rz = restore_position.get('Z', False) %}

    # ─── possibly choose the decend Y if it falls within our min max
    {% set safe_y_max    = lim_max.y - tool_size.y - 10 %}
    {% set safe_y_min    = [safe_y_force, (dock.y + tool_size.y)]|max %}
    {% if ry and ry >= (safe_y_min + 10) and ry <= (safe_y_max - 10) %}
        {% set safe_y = ry %}
    {% endif %}

    {% set safe_y_d = [10, (10 + (safe_y - tool_size.y) * 0.4142)]|max %} # allow scaling deviation

    # ─── move out of docks.
    ROUNDED_G0 Y={safe_y} F={fast} D={safe_y_d}

    {% if rx and (dock.x - rx)|abs < min_D and rz %}  # join XZ segment if X is too short (corner ends up too sharp) 
        ROUNDED_G0 X={rx} Z={rz + 10} F={fast} D=200
    {% else %}
        {% if rz %} ROUNDED_G0 Z={rz + 10} F={fast} D=200  {% endif %}
        {% if rx %} ROUNDED_G0 X={rx}      F={fast} D=1000 {% endif %}
    {% endif %}
    {% if ry %} ROUNDED_G0 Y={ry} F={fast}   D=50 {% endif %}
    {% if rz %} ROUNDED_G0 Z={rz} F={fast/5} D=0  {% endif %}

    ROUNDED_G0 D=0

    SET_VELOCITY_LIMIT ACCEL={th.max_accel}

    {% if printer.print_stats.state|lower == 'printing' and 'tool_probe_endstop' in printer %}
        START_TOOL_PROBE_CRASH_DETECTION T={tn}
    {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  INITIALIZE_TOOLCHANGER
  VERIFY_TOOL_DETECTED
  RESUME_BASE

[gcode_macro TOOL_ALIGN_START]
gcode:
    INITIALIZE_TOOLCHANGER # Detect current tool
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set curpos = printer.gcode_move.gcode_position %}
    {% if curpos[1] > 0 %}
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
